// For license information, see `https://assets.adobedtm.com/1b439b897261/d3e6f0340eeb/927861093fd7/RC24e646f0058a4c528f193ce3ea518227-source.js`.
_satellite.__registerScript('https://assets.adobedtm.com/1b439b897261/d3e6f0340eeb/927861093fd7/RC24e646f0058a4c528f193ce3ea518227-source.min.js', "<iframe name=\"__bkframe\" height=\"0\" width=\"0\" frameborder=\"0\" style=\"display:none;position:absolute;clip:rect(0px 0px 0px 0px)\" src=\"about:blank\"></iframe>\n<script src=\"https://tags.bkrtx.com/js/bk-coretag.js\"></script>\n<script>\n/* global bk_addPageCtx, bk_doJSTag, _satellite */\n(function () {\n    if (typeof bk_addPageCtx !== 'function') return;\n\n    var WDPRO = window.WDPRO = window.WDPRO || {},\n        A = WDPRO.Analytics = WDPRO.Analytics || {},\n        Handlers = A.Handlers = A.Handlers || [],\n        waitFor = _satellite.getVar('waitFor'),\n        F,\n        $,\n        cookies = {},\n        cookieString = '',\n        vars = {},\n        vpg = {\n            enabled: true,\n            siteSectionIndicator: 'commerce/vacaguide'\n        },\n        VISITOR = 'visitor',\n        SEARCH = 'search',\n        CART = 'cart',\n        CONVERSION = 'conversion',\n        resortCategories = ['deluxe-villa', 'value', 'deluxe', 'moderate', 'campground', 'other-select-deluxe-hotels'],\n        resorts = {\n            11: {name: 'Disney\\'s Saratoga Springs Resort & Spa', category: 'deluxe-villa'},\n            12: {name: 'Disney\\'s Animal Kingdom Villas - Jambo House', category: 'deluxe-villa'},\n            13: {name: 'Disney\\'s Animal Kingdom Villas - Kidani Village', category: 'deluxe-villa'},\n            14: {name: 'Bay Lake Tower at Disney\\'s Contemporary Resort', category: 'deluxe-villa'},\n            18: {name: 'The Villas at Disney\\'s Grand Floridian Resort & Spa', category: 'deluxe-villa'},\n            45: {name: 'Disney\\'s Polynesian Villas & Bungalows', category: 'deluxe-villa'},\n            47: {name: 'Disney\\'s Riviera Resort', category: 'deluxe-villa'},\n            '1E': {name: 'Disney\\'s All-Star Movies Resort', category: 'value'},\n            '1A': {name: 'Disney\\'s All-Star Music Resort', category: 'value'},\n            '1S': {name: 'Disney\\'s All-Star Sports Resort', category: 'value'},\n            '1Q': {name: 'Disney\\'s Animal Kingdom Lodge', category: 'deluxe'},\n            '1V': {name: 'Disney\\'s Art of Animation Resort', category: 'value'},\n            '1W': {name: 'Disney\\'s Beach Club Resort', category: 'deluxe'},\n            '1D': {name: 'Disney\\'s Beach Club Villas', category: 'deluxe-villa'},\n            '1I': {name: 'Disney\\'s BoardWalk Inn', category: 'deluxe'},\n            '1Z': {name: 'Disney\\'s BoardWalk Villas', category: 'deluxe-villa'},\n            '1R': {name: 'Disney\\'s Caribbean Beach Resort', category: 'moderate'},\n            '1C': {name: 'Disney\\'s Contemporary Resort', category: 'deluxe'},\n            '1N': {name: 'Disney\\'s Coronado Springs Resort', category: 'moderate'},\n            '1B': {name: 'Disney\\'s Grand Floridian Resort & Spa', category: 'deluxe'},\n            '1K': {name: 'Disney\\'s Old Key West Resort', category: 'deluxe-villa'},\n            '1G': {name: 'Disney\\'s Pop Century Resort', category: 'value'},\n            '1O': {name: 'Disney\\'s Port Orleans Resort - French Quarter', category: 'moderate'},\n            '1L': {name: 'Disney\\'s Port Orleans Resort - Riverside', category: 'moderate'},\n            '1Y': {name: 'Disney\\'s Yacht Club Resort', category: 'deluxe'},\n            '1FW': {name: 'The Cabins at Disney\\'s Fort Wilderness Resort', category: 'moderate'},\n            '1F': {name: 'The Campsites at Disney\\'s Fort Wilderness Resort', category: 'campground'},\n            '1X': {name: 'The Villas at Disney\\'s Wilderness Lodge', category: 'deluxe-villa'},\n            SWN: {name: 'Walt Disney World Swan Hotel', category: 'other-select-deluxe-hotels'},\n            DOL: {name: 'Walt Disney World Dolphin Hotel', category: 'other-select-deluxe-hotels'},\n            '1J': {name: 'Disney\\'s Wilderness Lodge', category: 'deluxe'},\n            '1P': {name: 'Disney\\'s Polynesian Village Resort', category: 'deluxe'}\n        },\n        tagIdMap = obj(\n            SEARCH, 27173,\n            CART, 28655,\n            CONVERSION, 28657,\n            VISITOR, 28659\n        ),\n        emeaTag = 56506,\n        lastTagType = VISITOR;\n\n    Handlers.push(\n        {events: 'parseModelComplete.framework', handler: process},\n        {events: 'siteCatalystCallComplete', handler: wishlistAdd}\n    );\n\n    waitFor({\n        location: 'lpTag.events.bind',\n        callback: function (bind) {\n            // Interesting LP Events: LP_INV_SHOWN, LP_INV_ACCEPT, LP_INV_DECLINE, LP_INV_TIMEOUT, LP_DYNBUTTON_CLICKED\n            bind({\n                eventName: 'LP_DYNBUTTON_CLICKED',\n                func: function () {\n                    fireBKTag({eventType: 'chat', eventSubType: getPageType() === CART ? 'inCart' : 'outCart'});\n                }\n            });\n        },\n        timeout: 45000,\n        interval: 1000\n    });\n\n    if (/^\\/dining\\//.test(location.pathname)) {\n        waitFor({\n            location: [\n                'WDPRO.Analytics.wdwQuery',\n                document.querySelector.bind(document, '#diningReservationFormContainer #searchButton')\n            ],\n            callback: function (wdwQuery, searchButton) {\n                $ = wdwQuery;\n                $(searchButton).on('click', function () {\n                    var facetStr = location.hash.replace(/^#\\/|\\/$/g, '');\n                    if (facetStr) {\n                        fireBKTag({facet: facetStr.replace(/,/g, '|')}, SEARCH);\n                    }\n                });\n            },\n            timeout: 40000,\n            interval: 500\n        });\n    }\n\n    function wishlistAdd(e, data) {\n        var wishlistType;\n        if (data.trackingType === 'trackClick' && strContains(ref('dataSent.prop9', data), 'WishlistAdd')) {\n            if (strContains(data.dataSent.prop9, '_Attraction_')) {\n                wishlistType = 'attraction';\n            } else if (strContains(data.dataSent.prop9, '_resort_')) {\n                wishlistType = 'hotel';\n            } else if (strContains(data.dataSent.prop9, '_restaurant_')) {\n                wishlistType = 'dining';\n            }\n            if (wishlistType) {\n                fireBKTag({eventType: 'wishlist', eventSubType: wishlistType});\n            }\n        }\n    }\n\n    function process(e, sam) {\n        if (!ref('configuration.SiteCatalyst', sam)) return;\n        var pageType = getPageType(sam),\n            pageMap = obj(\n                SEARCH, searchTag,\n                CART, cartTag,\n                CONVERSION, conversionTag,\n                VISITOR, visitorTag\n            );\n        $ = ref('WDPRO.Analytics.wdwQuery');\n        addCommonVars(vars, sam);\n        pageMap[pageType](vars, sam);\n    }\n\n    function getSAM() {\n        if ((F = A.Framework) && Array.isArray(F.analyticsModel) && F.analyticsModel.length > 0) {\n            return F.analyticsModel[0];\n        }\n    }\n\n    function addCommonVars(vars) {\n        return _set(vars, {\n            id: getSWID(),\n            pageKey: $('meta[name=pageKey]').attr('content')\n        });\n    }\n\n    function getPageType(sam) {\n        sam = sam || getSAM() || {};\n        if (\n            strContains(sam.events, 'purchase') ||\n            sam.pageId === 'confirmsuccess'\n        ) {\n            return CONVERSION;\n        } else if (\n            strContains(sam.siteSection, '/cart/') ||\n            strContains(sam.events, 'cart') ||\n            ref('carts.0.id', sam) ||\n            strContains(ref('products.0.events', sam), 'cart')\n        ) {\n            return CART;\n        } else if (\n            vpg.enabled &&\n            strContains(sam.siteSection, vpg.siteSectionIndicator)\n        ) {\n            return VISITOR;\n        } else if (\n            sam.bookingSearchArrivalDate\n        ) {\n            return SEARCH;\n        }\n        return VISITOR;\n    }\n\n    function getSWID() {\n        return ref('PEP.guestLocators.swid') ||\n            ref('WDPRO.Analytics.Framework.analyticsModel.0.customerId') ||\n            cookieGet('SWID') ||\n            cookieGetObject('stateManager_jar', 'swid') ||\n            cookieGetObject('rememberme', 'swid');\n    }\n\n    function getFinderFacets() {\n        if (ref('PEP.Finder')) {\n            return ((location.hash || '').match(/^#\\/(.+?)\\/?$/) || [])[1];\n        }\n    }\n\n    function splitCategoryFacets(facetStr) {\n        var facets = {},\n            facetArr,\n            propName;\n\n        if (facetStr) {\n            facetArr = facetStr.split(',');\n            facetArr.forEach(function (facet) {\n                propName = resortCategories.indexOf(facet) > -1 ? 'category' : 'other';\n                (facets[propName] = facets[propName] || []).push(facet);\n            });\n            if (facets.category) {\n                facets.category = facets.category.join(',');\n            }\n            if (facets.other) {\n                facets.other = facets.other.join(',');\n            }\n        }\n        return facets;\n    }\n\n    function dateFormat(date, fmt) {\n        var moment = ref('WDPRO.Analytics.moment');\n        if (date && moment && (date = moment(date)).isValid()) {\n            return date.format(fmt);\n        }\n    }\n\n    function vpgCategory(linkCategory) {\n        var transformMap = {\n            PARK_ACTIVITY: 'ParkActivity',\n            RESORT_FEATURES: 'ResortFeatures',\n            DINING_EXPERIENCES: 'DiningExperiences'\n        };\n        return transformMap[linkCategory];\n    }\n\n    function vpgValue(selection) {\n        var pfx = 'wdpr-wdw-o-vpg-q-',\n            st = pfx + 'style-',\n            pa = pfx + 'pref-activities-',\n            pr = pfx + 'pref-resort-',\n            pd = pfx + 'pref-dining-',\n            transformMap = obj(\n                st + 'generations', 'Generations',\n                st + 'group', 'BigGroup',\n                st + 'family', 'MyFamily',\n                st + 'active', 'Active',\n                st + 'splurge', 'Splurge',\n                st + 'romantic', 'Romantic',\n                st + 'spoccasion', 'SpecialOccasion',\n                st + 'budget', 'Budget',\n                st + 'relaxed', 'Relaxed',\n\n                pa + 'princess', 'DisneyPrincesses',\n                pa + 'paradesfireworks', 'ParadesampFireworks',\n                pa + 'thrill', 'ThrillRides',\n                pa + 'space', 'SpaceAdventures',\n                pa + 'classics', 'DisneyParkClassics',\n                pa + 'newatparks', 'NewattheParks',\n                pa + 'scary', 'ScaryGoodFun',\n                pa + 'animal', 'AnimalAttractions',\n                pa + 'pirate', 'PiratesAhoy',\n                pa + 'water', 'WaterParksampRides',\n                pa + 'showsmusic', 'LiveShowsampMusic',\n                pa + 'disneyfan', 'ForDisneyFanatics',\n                pa + 'characters', 'CharacterExperiences',\n\n                pr + 'pools', 'WayCoolPools',\n                pr + 'storyexp', 'StoryExperienceRooms',\n                pr + 'waterfront', 'WaterfrontResorts',\n                pr + 'golf', 'Golf',\n                pr + 'accessible', 'AccessibleRooms',\n                pr + 'kitchenette', 'Kitchenettes',\n                pr + 'fitness', 'FitnessCenter',\n                pr + 'views', 'IncredibleViews',\n                pr + 'spasalon', 'SpaampSalon',\n\n                pd + 'asian', 'AsianCuisine',\n                pd + 'fireworks', 'FireworksDining',\n                pd + 'latenight', 'LateNightEats',\n                pd + 'italian', 'ItalianCuisine',\n                pd + 'character', 'CharacterDining',\n                pd + 'foodie', 'FoodieFavorite',\n                pd + 'wine', 'GreatWineSelection',\n                pd + 'special', 'SpecialExperiences',\n                pd + 'fine', 'FineDining',\n                pd + 'show', 'DinnerandaShow',\n                pd + 'sweets', 'SweetsandTreats',\n                pd + 'classic', 'ClassicComfortFood',\n                pd + 'global', 'GlobalGourmetFare',\n                pd + 'steaks', 'SteaksampChops',\n                pd + 'beer', 'BeersampPubs',\n                pd + 'foodtrucks', 'FoodTrucks',\n                pd + 'quick', 'QuickService',\n                pd + 'latinmex', 'LatinandMexicanCuisine',\n                pd + 'sportsbars', 'SportsBar'\n            );\n        return transformMap[selection] || selection;\n    }\n\n    function vpgSeasonMonths(selection) {\n        var monthsMap = {\n            '01': 'Jan',\n            '02': 'Feb',\n            '03': 'Mar',\n            '04': 'Apr',\n            '05': 'May',\n            '06': 'Jun',\n            '07': 'Jul',\n            '08': 'Aug',\n            '09': 'Sep',\n            10: 'Oct',\n            11: 'Nov',\n            12: 'Dec',\n            winter: 'Jan,Feb',\n            spring: 'Mar,Apr,May',\n            summer: 'Jun,Jul,Aug',\n            autumn: 'Sep,Oct,Nov',\n            holidays: 'Nov,Dec',\n            'any-season': 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'\n        };\n        return monthsMap[selection] || '';\n    }\n\n    function vpgData(pageId) {\n        var result = {},\n            category,\n            data,\n            val,\n            val2,\n            frm;\n\n        /* eslint-disable no-multi-spaces */\n        // angular.element('[ng-app]').injector().get('guestSelections').data\n        if (\n            (data = window.angular             ) && typeof data.element === 'function' &&\n            (data = data.element('[ng-app]')   ) && typeof data.injector === 'function' &&\n            (data = data.injector()            ) && typeof data.get === 'function' &&\n            (data = data.get('guestSelections')) &&\n            (data = data.data                  )\n        ) {\n        /* eslint-enable no-multi-spaces */\n            switch (pageId) {\n                case 'recommendation':\n                    if (typeof data.travelTimes === 'object' && 'useFlexibleNotExact' in data.travelTimes) {\n                        if (data.travelTimes.useFlexibleNotExact) {\n                            if ((val = vpgSeasonMonths(ref('flexible.seasonsId', data.travelTimes)))) result.TravelMonth = val;\n                        } else {\n                            if (\n                                (val = ref('exact.checkInDate', data.travelTimes)) &&\n                                (val = vpgSeasonMonths(val.substr(5, 2))) &&\n                                (val2 = ref('exact.checkOutDate', data.travelTimes)) &&\n                                (val2 = vpgSeasonMonths(val2.substr(5, 2)))\n                            ) {\n                                result.TravelMonth = val + (val2 === val ? '' : ',' + val2);\n                            }\n                        }\n                    }\n                    result.bookingSearchAdults = ref('partyMix.adultCount', data);\n                    result.bookingSearchKids = ref('partyMix.kidCount', data);\n                    if (Array.isArray((val = ref('partyMix.nonAdults', data))) && val.length > 0) {\n                        result.bookingSearchChildrenAges = val.join(',');\n                        result.youngestChild = val.reduce(function (p, c) {\n                            return p < c ? p : c;\n                        });\n                    }\n\n                    if ((frm = document.getElementById('addToCartForm'))) {\n                        frm.submit = function () {\n                            fireBKTag(_set(vars, 'eventType', 'AddRecommendationToCart'));\n                            setTimeout(function () {\n                                HTMLFormElement.prototype.submit.call(frm);\n                            }, 580);\n                        };\n                    }\n                    break;\n\n                case 'traveldetails':\n                    if (Array.isArray(data.vacationChoices) && data.vacationChoices.length > 0) {\n                        data.vacationChoices.forEach(function (choice) {\n                            if ((category = vpgCategory(choice.type))) {\n                                result[category] = result[category] || [];\n                                result[category].push(vpgValue(choice.id));\n                            }\n                        });\n                        ['ParkActivity', 'ResortFeatures', 'DiningExperiences'].forEach(function (category) {\n                            if (result[category]) result[category] = result[category].join(',');\n                        });\n                    }\n                    break;\n\n                case 'travelpreferences':\n                    if (Array.isArray(data.travelStyles) && data.travelStyles.length > 0) {\n                        result.TravelStyle = data.travelStyles.map(vpgValue).join(',');\n                    }\n                    break;\n\n            }\n        }\n\n        return result;\n    }\n\n    function p13nData(sam) {\n        var locations = [],\n            contentIds = [],\n            customerGroups = [],\n            vpcSegment = '';\n\n        if (Array.isArray(sam.personalizations)) {\n            sam.personalizations.forEach(function (pzn) {\n                if (pzn.locationType !== 'data') {\n                    locations.push(pzn.location);\n                    contentIds.push(getContentIdFromLocation(pzn));\n                    customerGroups.push(pzn.customerGroup);\n                }\n                if (pzn.vpcSegment) {\n                    vpcSegment = pzn.vpcSegment;\n                }\n            });\n        }\n\n        return WDPRO.Analytics.getPersonalizationId && locations.length > 0 ?\n            {\n                p13nLocations: locations.join(','),\n                p13nContentIds: contentIds.join(','),\n                p13nCustomerGroups: customerGroups.join(','),\n                p13nVpcSegment: vpcSegment,\n                p13nId: WDPRO.Analytics.getPersonalizationId() || ''\n            } :\n            {};\n    }\n\n    function getContentIdFromLocation(location) {\n        var contentId = '';\n        if (location) {\n            if (location.options) {\n                location.options.forEach(function (option) {\n                    if (option.decision) contentId = option.decision;\n                });\n            } else if (location.customerGroup && /^(?:c|c1|c2)$/.test(location.customerGroup)) {\n                contentId = 'DEFAULT';\n            }\n        }\n        return contentId;\n    }\n\n    function getResort(pkg, product, sam) {\n        var facilityIds = [],\n            resort;\n\n        if (pkg && pkg.facilityId) {\n            return resorts[pkg.facilityId];\n        }\n\n        if (product && product.facilityId) {\n            return resorts[product.facilityId];\n        }\n\n        if (Array.isArray(sam.productsDisplayed)) {\n            facilityIds = sam.productsDisplayed.map(function (product) {\n                return product.facilityId;\n            }).filter(truthy);\n        }\n        if (\n            facilityIds.length > 0 &&\n            facilityIds.every(function (id, i, arr) {\n                return id === arr[0];\n            })\n        ) {\n            resort = resorts[facilityIds[0]];\n        }\n        return resort;\n\n        function truthy(v) {\n            return v;\n        }\n    }\n\n    function getVacationPackage(sam) {\n        var package;\n        if (Array.isArray(sam.products)) {\n            sam.products.forEach(function (product) {\n                if (\n                    !package &&\n                    product.productType === 'resortVacation' &&\n                    !strContains(product.events, 'cartRemove')\n                ) {\n                    package = product;\n                }\n            });\n        }\n        return package;\n    }\n\n    function getBookingSearch(type, data) {\n        var response,\n            paths = [\n                'pkg.booked' + type,\n                'pkg.bookingSearch' + type,\n                'sam.bookingSearch' + type,\n                'sam.totalBooked' + type\n            ];\n        paths.forEach(function (path) {\n            if (response === undefined) {\n                response = ref(path, data);\n            }\n        });\n        return response;\n    }\n\n    function visitorTag(vars, sam) {\n        var facets = splitCategoryFacets(getFinderFacets());\n\n        _set(vars, {\n            contentLang: ref('configuration.contentLanguage', sam),\n            contentLocale: ref('configuration.contentLocale', sam),\n            SiteSection: sam.siteSection,\n            pageID: sam.pageId,\n            facet: facets.other,\n            FacilityCategories: facets.category,\n        });\n\n        if (vpg.enabled && sam.siteSection === vpg.siteSectionIndicator) {\n            _set(vars, vpgData(sam.pageId));\n        }\n\n        _set(vars, p13nData(sam));\n\n        fireBKTag(vars, VISITOR);\n    }\n\n    function searchTag(vars, sam) {\n        var facets = splitCategoryFacets(getFinderFacets()),\n            pkg = getVacationPackage(sam),\n            product = ref('products.0', sam),\n            resort = getResort(pkg, product, sam),\n            data = {resort: resort, product: product, pkg: pkg, sam: sam};\n\n        _set(vars, {\n            bookingSearchAdults: +getBookingSearch('Adults', data),\n            bookingSearchKids: +getBookingSearch('Children', data) + +getBookingSearch('Infants', data),\n            bookingSearchChildrenAges: (getBookingSearch('ChildrenAges', data) || []).join(',') || undefined,\n            ProductID: ref('pkg.productId', data) || ref('product.productId', data),\n            ProductType: ref('pkg.productType', data) || ref('product.productType', data),\n            bookingSearchArrivalDate: dateFormat(getBookingSearch('ArrivalDate', data), 'YYYY-MM-DD'),\n            bookingSearchLengthOfStayNights: +getBookingSearch('LengthOfStayNights', data),\n            FacililtyName: ref('resort.name', data),\n            FacilityCategories: ref('resort.category', data) || facets.category,\n            packageType: ref('pkg.packageType', data),\n            facet: facets.other\n        });\n\n        _set(vars, p13nData(sam));\n\n        fireBKTag(vars, SEARCH);\n    }\n\n    function cartTag(vars, sam) {\n        var facets = splitCategoryFacets(getFinderFacets()),\n            pkg = getVacationPackage(sam),\n            product = ref('products.0', sam),\n            resort = getResort(pkg, product, sam),\n            data = {resort: resort, product: product, pkg: pkg, sam: sam};\n\n        _set(vars, {\n            ProductID: multiRef('productId', sam.products, '/'), //ref('pkg.productId', data) || ref('product.productId', data),\n            ProductType: multiRef('productType', sam.products, '/'), //ref('pkg.productType', data) || ref('product.productType', data),\n            days: multiRef('days', sam.products, '/'), //ref('product.days', data),\n            name: multiRef('name', sam.products, '/'), //ref('product.name', data),\n            parks: multiRef('venues', sam.products, '/'),\n            FacililtyName: ref('resort.name', data),\n            FacilityCategories: ref('resort.category', data) || facets.category,\n            packageType: ref('pkg.packageType', data),\n            facet: facets.other,\n            bookingSearchAdults: +getBookingSearch('Adults', data),\n            bookingSearchKids: +getBookingSearch('Children', data) + +getBookingSearch('Infants', data),\n            bookingSearchChildrenAges: (getBookingSearch('ChildrenAges', data) || []).join(',') || undefined,\n            bookingSearchArrivalDate: dateFormat(getBookingSearch('ArrivalDate', data), 'YYYY-MM-DD'),\n            bookingSearchLengthOfStayNights: +getBookingSearch('LengthOfStayNights', data)\n        });\n\n        _set(vars, p13nData(sam));\n\n        fireBKTag(vars, CART);\n        watchCartUpdate();\n    }\n\n    function watchCartUpdate() {\n        $(document).on('cartItemUpdate', function (e, model) {\n            if(ref('trackingModel.carts.0.status', model) === 'empty') {\n                fireBKTag({cart: 'empty'}, CART);\n            }\n        });\n    }\n\n    function conversionTag(vars, sam) {\n        var facets = splitCategoryFacets(getFinderFacets()),\n            pkg = getVacationPackage(sam),\n            product = ref('products.0', sam),\n            resort = getResort(pkg, product, sam),\n            data = {resort: resort, product: product, pkg: pkg, sam: sam};\n\n        _set(vars, {\n            ProductID: multiRef('productId', sam.products, '/'), //ref('pkg.productId', data) || ref('product.productId', data),\n            ProductType: multiRef('productType', sam.products, '/'), //ref('pkg.productType', data) || ref('product.productType', data),\n            days: multiRef('days', sam.products, '/'), //ref('product.days', data),\n            name: multiRef('name', sam.products, '/'), //ref('product.name', data),\n            parks: multiRef('venues', sam.products, '/'),\n            FacililtyName: ref('resort.name', data),\n            FacilityCategories: ref('resort.category', data) || facets.category,\n            packageType: ref('pkg.packageType', data),\n            facet: facets.other,\n            bookingSearchAdults: +getBookingSearch('Adults', data),\n            bookingSearchKids: +getBookingSearch('Children', data) + +getBookingSearch('Infants', data),\n            bookingSearchChildrenAges: (getBookingSearch('ChildrenAges', data) || []).join(',') || undefined,\n            bookingSearchArrivalDate: dateFormat(getBookingSearch('ArrivalDate', data), 'YYYY-MM-DD'),\n            bookingSearchLengthOfStayNights: +getBookingSearch('LengthOfStayNights', data)\n        });\n\n        _set(vars, p13nData(sam));\n\n        fireBKTag(vars, CONVERSION);\n    }\n\n    function isEMEA() {\n        return /^\\/en(_GB|-eu)\\//.test(location.pathname) ||\n            /^en(_GB|-eu)$/.test(cookieGetObject('localeCookie_jar_aka', 'contentLocale'));\n    }\n\n    function fireBKTag(vars, tagType) {\n        objForEach(vars, function (val, key) {\n            bk_addPageCtx(key, val);\n        });\n        window.bk_allow_multiple_calls = true;\n        window.bk_use_multiple_iframes = true;\n        bk_doJSTag(\n            isEMEA() ? emeaTag : tagIdMap[(lastTagType = tagType || lastTagType)],\n            10\n        );\n    }\n    \n    function multiRef(path, base, enclose) {\n        var value = [];\n\n        if (Array.isArray(base)) base.forEach(function (b) {\n            value.push(ref(path, b));\n        });\n\n        if (enclose) value = value.map(function (v) {\n            return enclose + v + enclose;\n        });\n\n        return value.length > 0 ? value.join(',') : undefined;\n    }\n\n    function ref(path, base) {\n        var i = path.indexOf('.');\n        base = base || this;\n        return (i === -1) ? base[path] : (base = base[path.substr(0, i)]) && ref(path.substr(i + 1), base);\n    }\n\n    function strContains(str, key) {\n        if (typeof str === 'string') {\n            return str.indexOf(key) > -1;\n        }\n    }\n\n    function cookieGetObject(name, key) {\n        var obj = _parse(cookieGet(name));\n        if (key) {\n            obj = obj && typeof obj === 'object' && !Array.isArray(obj) ? ref(key, obj) : undefined;\n        }\n        return obj;\n    }\n\n    function cookieGet(key) {\n        return cookiesGetAll()[key];\n    }\n\n    function cookiesGetAll() {\n        var newCookieStr = document.cookie,\n            cookieArr,\n            i,\n            cookie,\n            index,\n            cookieName;\n\n        if (newCookieStr !== cookieString) {\n            cookieString = newCookieStr;\n            cookies = {};\n\n            cookieArr = cookieString.split('; ');\n            for (i = 0; i < cookieArr.length; i++) {\n                cookie = cookieArr[i];\n                index = cookie.indexOf('=');\n                if (index > 0) {\n                    cookieName = _decode(cookie.substring(0, index));\n                    if (!(cookieName in cookies)) {\n                        cookies[cookieName] = _decode(cookie.substring(index + 1));\n                    }\n                }\n            }\n        }\n        return cookies;\n    }\n\n    function _decode(str) {\n        try {\n            str = decodeURIComponent(str);\n        } catch (ignore) {\n            // str is not decodable using decodeURIComponent\n        }\n        return str;\n    }\n\n    function _parse(str) {\n        try {\n            str = JSON.parse(str);\n        } catch (ignore) {\n            // str is not parsable\n        }\n        return str;\n    }\n\n    function isNotNaN(val) {\n        return val === val;\n    }\n\n    function objForEach(r,n,o){var t;for(t in r)r.hasOwnProperty(t)&&n.call(o,r[t],t,r)} // eslint-disable-line\n\n    function obj(){for(var o={},a=arguments,i=0,n=a.length;n>i;)o[a[i++]]=a[i++];return o} // eslint-disable-line\n\n    function _set(targetObj, key, val) {\n        var srcObj = key;\n        if (typeof key === 'string') (srcObj = {})[key] = val;\n        \n        objForEach(srcObj, function (val, key) {\n            if (typeof val !== 'undefined' && isNotNaN(val)) {\n                targetObj[key] = val;\n            }\n        });\n        return targetObj;\n    }\n\n}());\n</script>\n");