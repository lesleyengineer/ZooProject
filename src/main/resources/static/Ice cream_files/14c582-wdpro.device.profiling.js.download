var WDPRO_DeviceProfiling = WDPRO_DeviceProfiling || {};

// Check for the appropriate cookie, and check is the cookie has density/resolution values
(function(_cookieName, _cookieVersion, _cookieDomain, _cookiePath, DeviceProfiling) {
	// Tokens are replaced in the Zend view helper that writes this script to the page.
	var COOKIE_NAME = _cookieName;
	var VERSION = _cookieVersion;
	var COOKIE_DOMAIN = _cookieDomain;
	var COOKIE_PATH = _cookiePath;
	var initFlag = false;

	var initNewProfile = function() {
        return {version:VERSION,preferred:{}, deviceInfo:{}, browserInfo:{}};
	};

	var readCookie = function(name) {
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for(var i=0;i < ca.length;i++) {
			var c = ca[i];
			while (c.charAt(0)==' ') c = c.substring(1,c.length);
			if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
		}
		return null;
	}

	// sets the cookie according to the indices of an object
	var setCookie = function(profile, beforeProfileString, afterProfileString) {
		var jsonProfileData = getClientJSON(profile);
		/* We need to add a dot in front of a domain to get to the same cookie that PHP is setting.
		 * However, if you put a dot in front of an IP address, it'll fail.
		*/
		var cookie = "";
		cookie += COOKIE_NAME+"="+beforeProfileString+jsonProfileData+afterProfileString+"; ";
		cookie += "path="+COOKIE_PATH+"; domain="+COOKIE_DOMAIN;
		document.cookie = cookie;
	};

	var getProfileObject = function(deviceProfileString) {
		var profile = null;
		// urldecode and get a JSON object
		var data = unescape(deviceProfileString);
		if (!!window.JSON) {
			try {
				profile = JSON.parse(data);
			} catch(e) {
				return false;
			}
		} else {
			profile = eval('(' + data + ')');
		}

		// error checking, reset if error
		if (profile.preferred == null || profile.deviceInfo == null || profile.version == null) {
			profile = initNewProfile();
		}
		if (profile.version*1 != VERSION) {
			profile = initNewProfile();
		}
		return profile;
	};

	var getClientWidth = function() {
		return (window.innerWidth>0) ? window.innerWidth : screen.width;
	};

	var getClientHeight = function() {
		return (window.innerHeight>0) ? window.innerHeight : screen.height;
	};

	var getClientDensity = function() {
		return window.devicePixelRatio !== undefined ? window.devicePixelRatio : 1;
	};

	// turns the profile object into a JSON string. This isn't a full JSONifier, it doesn't recurse
	// or account for arrays or objects.
	var getClientJSON = function(profileObj) {
		// encode preferred
		var aKeyValues = [];
		for (key in profileObj.preferred) {
			aKeyValues.push("\""+key+"\":\""+profileObj.preferred[key]+"\"");
		}
		var preferred = "{"+aKeyValues.join(",")+"}";
		// encode device
		aKeyValues = [];
		for (key in profileObj.deviceInfo) {
			aKeyValues.push("\""+key+"\":\""+profileObj.deviceInfo[key]+"\"");
		}
		var device = "{"+aKeyValues.join(",")+"}";
        // encode browser
        aKeyValues = [];
        for (key in profileObj.browserInfo) {
            aKeyValues.push("\""+key+"\":\""+profileObj.browserInfo[key]+"\"");
        }
        var browser = "{"+aKeyValues.join(",")+"}";

        data = "{\"version\":\""+VERSION+"\",\"preferred\":"+preferred+",\"deviceInfo\":"+device+
            ",\"browserInfo\":"+browser+"}";

        return data;
	};

	// Sets density and screen resolution.
	var getClientProfile = function(deviceProfileString) {
		var profile = getProfileObject(deviceProfileString);
    // Hot fix to change == to ===
		profile = typeof profile === 'object' ? profile : {};
		profile.preferred = profile.preferred || {};
		profile.deviceInfo = profile.deviceInfo || {};

		// Assume portrait, set width and height
		var width = getClientWidth();
		var height = getClientHeight();
		// width and height will swap, depending on whether we're in landscape or portrait
		switch (window.orientation) {
			case 90:
			case -90:
				profile.preferred.screenWidth = profile.deviceInfo.screenWidth = height;
				profile.preferred.screenHeight = profile.deviceInfo.screenHeight = width;
				break;
			default:
				profile.preferred.screenWidth = profile.deviceInfo.screenWidth = width;
				profile.preferred.screenHeight = profile.deviceInfo.screenHeight = height;
				break;
		}
		profile.preferred.screenDensity = profile.deviceInfo.screenDensity = getClientDensity();

		// return the profile object
		return profile;
	};

	var init =  function() {
		if (readCookie(COOKIE_NAME) !== null && initFlag === false) {
			initFlag = true; // Establish that device profiling has been initialized to prevent multiple calls

			var cookieString = readCookie(COOKIE_NAME);

			// Get Profile Device Substring and everything before and after that in the cookie
			var deviceProfileStart = cookieString.indexOf(encodeURIComponent('{"version":'));
			var deviceProfileEnd = cookieString.substring(deviceProfileStart).indexOf(encodeURIComponent(('}}')))
				 + encodeURIComponent('}}').length;
			var deviceProfileString = cookieString.substring(deviceProfileStart).substring(0,deviceProfileEnd);
			var beforeProfileString = "";
			var afterProfileString = "";
			if(deviceProfileStart !== 0) {
				beforeProfileString = cookieString.substring(0,deviceProfileStart);
			}
			if (deviceProfileEnd !== cookieString.length) {
				afterProfileString = cookieString.substring(deviceProfileStart + deviceProfileEnd);
			}

			// sets the profile objects
			var profile = getClientProfile(deviceProfileString);
			DeviceProfiling.preferredView = profile.preferred;
			DeviceProfiling.deviceInfo = profile.deviceInfo;

			//sets the cookie
			setCookie(profile, beforeProfileString, afterProfileString);
		}
	}
	DeviceProfiling.init = init;
}(_cookieName, _cookieVersion, _cookieDomain, _cookiePath, WDPRO_DeviceProfiling));

window.WDPRO_DeviceProfiling.init();
